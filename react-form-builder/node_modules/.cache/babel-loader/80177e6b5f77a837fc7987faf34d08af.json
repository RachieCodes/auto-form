{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\auto-form\\\\react-form-builder\\\\src\\\\components\\\\LivePreview.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport LivePreview from './LivePreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormBuilder = () => {\n  _s();\n  const [formData, setFormData] = useState([]);\n  useEffect(() => {\n    // Example field IDs you want to preview\n    const fieldIds = ['name', 'email', 'country'];\n    const fetchOptions = async () => {\n      const fields = await Promise.all(fieldIds.map(async id => {\n        const res = await fetch(`http://localhost:4000/api/options/${id}`);\n        const options = await res.json();\n        return {\n          id,\n          type: 'text',\n          // or 'select', etc.\n          required: true,\n          options\n        };\n      }));\n      setFormData(fields);\n    };\n    fetchOptions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LivePreview, {\n    formData: formData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};\n_s(FormBuilder, \"lokSdkSLZfErX0cQNfNp9SJ3li8=\");\n_c = FormBuilder;\nexport default FormBuilder;\nvar _c;\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"names":["React","useEffect","useState","LivePreview","jsxDEV","_jsxDEV","FormBuilder","_s","formData","setFormData","fieldIds","fetchOptions","fields","Promise","all","map","id","res","fetch","options","json","type","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Code/auto-form/react-form-builder/src/components/LivePreview.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport LivePreview from './LivePreview';\nimport { FormField } from '../types';\n\nconst FormBuilder: React.FC = () => {\n  const [formData, setFormData] = useState<FormField[]>([]);\n\n  useEffect(() => {\n    // Example field IDs you want to preview\n    const fieldIds = ['name', 'email', 'country'];\n\n    const fetchOptions = async () => {\n      const fields: FormField[] = await Promise.all(\n        fieldIds.map(async (id) => {\n          const res = await fetch(`http://localhost:4000/api/options/${id}`);\n          const options = await res.json();\n          return {\n            id,\n            type: 'text', // or 'select', etc.\n            required: true,\n            options,\n          };\n        })\n      );\n      setFormData(fields);\n    };\n\n    fetchOptions();\n  }, []);\n\n  return <LivePreview formData={formData} />;\n};\n\nexport default FormBuilder;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAc,EAAE,CAAC;EAEzDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,QAAQ,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IAE7C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,MAAmB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC3CJ,QAAQ,CAACK,GAAG,CAAC,MAAOC,EAAE,IAAK;QACzB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qCAAqCF,EAAE,EAAE,CAAC;QAClE,MAAMG,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAChC,OAAO;UACLJ,EAAE;UACFK,IAAI,EAAE,MAAM;UAAE;UACdC,QAAQ,EAAE,IAAI;UACdH;QACF,CAAC;MACH,CAAC,CACH,CAAC;MACDV,WAAW,CAACG,MAAM,CAAC;IACrB,CAAC;IAEDD,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAON,OAAA,CAACF,WAAW;IAACK,QAAQ,EAAEA;EAAS;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5C,CAAC;AAACnB,EAAA,CA3BID,WAAqB;AAAAqB,EAAA,GAArBrB,WAAqB;AA6B3B,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}