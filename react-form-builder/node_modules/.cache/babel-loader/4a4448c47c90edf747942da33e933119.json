{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\auto-form\\\\react-form-builder\\\\src\\\\components\\\\DragDropUI.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemTypes } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DragDropUI = ({\n  fields,\n  setFields\n}) => {\n  const moveField = (dragIndex, hoverIndex) => {\n    const draggedField = fields[dragIndex];\n    const updatedFields = [...fields];\n    updatedFields.splice(dragIndex, 1);\n    updatedFields.splice(hoverIndex, 0, draggedField);\n    setFields(updatedFields);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: fields.map((field, index) => /*#__PURE__*/_jsxDEV(DraggableField, {\n      index: index,\n      field: field,\n      moveField: moveField\n    }, field.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_c = DragDropUI;\nconst DraggableField = ({\n  field,\n  index,\n  moveField\n}) => {\n  _s();\n  const [, ref] = useDrag({\n    type: ItemTypes.FIELD,\n    item: {\n      index\n    }\n  });\n  const [, drop] = useDrop({\n    accept: ItemTypes.FIELD,\n    hover(item) {\n      if (item.index !== index) {\n        moveField(item.index, index);\n        item.index = index;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: node => ref(drop(node)),\n    style: {\n      padding: '8px',\n      border: '1px solid gray',\n      margin: '4px'\n    },\n    children: field.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(DraggableField, \"lfwUUZEDJMc44yfEAkiAYOn1N4Y=\", false, function () {\n  return [useDrag, useDrop];\n});\n_c2 = DraggableField;\nexport default DragDropUI;\nvar _c, _c2;\n$RefreshReg$(_c, \"DragDropUI\");\n$RefreshReg$(_c2, \"DraggableField\");","map":{"version":3,"names":["React","useDrag","useDrop","ItemTypes","jsxDEV","_jsxDEV","DragDropUI","fields","setFields","moveField","dragIndex","hoverIndex","draggedField","updatedFields","splice","children","map","field","index","DraggableField","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","ref","type","FIELD","item","drop","accept","hover","node","style","padding","border","margin","label","_c2","$RefreshReg$"],"sources":["D:/Code/auto-form/react-form-builder/src/components/DragDropUI.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemTypes } from '../types';\nimport { FormField } from '../types';\n\nconst DragDropUI = ({ fields, setFields }) => {\n    const moveField = (dragIndex, hoverIndex) => {\n        const draggedField = fields[dragIndex];\n        const updatedFields = [...fields];\n        updatedFields.splice(dragIndex, 1);\n        updatedFields.splice(hoverIndex, 0, draggedField);\n        setFields(updatedFields);\n    };\n\n    return (\n        <div>\n            {fields.map((field, index) => (\n                <DraggableField\n                    key={field.id}\n                    index={index}\n                    field={field}\n                    moveField={moveField}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst DraggableField = ({ field, index, moveField }) => {\n    const [, ref] = useDrag({\n        type: ItemTypes.FIELD,\n        item: { index },\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.FIELD,\n        hover(item) {\n            if (item.index !== index) {\n                moveField(item.index, index);\n                item.index = index;\n            }\n        },\n    });\n\n    return (\n        <div ref={(node) => ref(drop(node))} style={{ padding: '8px', border: '1px solid gray', margin: '4px' }}>\n            {field.label}\n        </div>\n    );\n};\n\nexport default DragDropUI;"],"mappings":";;AAAA,OAAOA,KAAK,MAAoB,OAAO;AACvC,SAASC,OAAO,EAAEC,OAAO,QAAQ,WAAW;AAC5C,SAASC,SAAS,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGrC,MAAMC,UAAU,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EAC1C,MAAMC,SAAS,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IACzC,MAAMC,YAAY,GAAGL,MAAM,CAACG,SAAS,CAAC;IACtC,MAAMG,aAAa,GAAG,CAAC,GAAGN,MAAM,CAAC;IACjCM,aAAa,CAACC,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;IAClCG,aAAa,CAACC,MAAM,CAACH,UAAU,EAAE,CAAC,EAAEC,YAAY,CAAC;IACjDJ,SAAS,CAACK,aAAa,CAAC;EAC5B,CAAC;EAED,oBACIR,OAAA;IAAAU,QAAA,EACKR,MAAM,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACrBb,OAAA,CAACc,cAAc;MAEXD,KAAK,EAAEA,KAAM;MACbD,KAAK,EAAEA,KAAM;MACbR,SAAS,EAAEA;IAAU,GAHhBQ,KAAK,CAACG,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIhB,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GArBInB,UAAU;AAuBhB,MAAMa,cAAc,GAAGA,CAAC;EAAEF,KAAK;EAAEC,KAAK;EAAET;AAAU,CAAC,KAAK;EAAAiB,EAAA;EACpD,MAAM,GAAGC,GAAG,CAAC,GAAG1B,OAAO,CAAC;IACpB2B,IAAI,EAAEzB,SAAS,CAAC0B,KAAK;IACrBC,IAAI,EAAE;MAAEZ;IAAM;EAClB,CAAC,CAAC;EAEF,MAAM,GAAGa,IAAI,CAAC,GAAG7B,OAAO,CAAC;IACrB8B,MAAM,EAAE7B,SAAS,CAAC0B,KAAK;IACvBI,KAAKA,CAACH,IAAI,EAAE;MACR,IAAIA,IAAI,CAACZ,KAAK,KAAKA,KAAK,EAAE;QACtBT,SAAS,CAACqB,IAAI,CAACZ,KAAK,EAAEA,KAAK,CAAC;QAC5BY,IAAI,CAACZ,KAAK,GAAGA,KAAK;MACtB;IACJ;EACJ,CAAC,CAAC;EAEF,oBACIb,OAAA;IAAKsB,GAAG,EAAGO,IAAI,IAAKP,GAAG,CAACI,IAAI,CAACG,IAAI,CAAC,CAAE;IAACC,KAAK,EAAE;MAAEC,OAAO,EAAE,KAAK;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,MAAM,EAAE;IAAM,CAAE;IAAAvB,QAAA,EACnGE,KAAK,CAACsB;EAAK;IAAAlB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEd,CAAC;AAACE,EAAA,CArBIP,cAAc;EAAA,QACAlB,OAAO,EAKNC,OAAO;AAAA;AAAAsC,GAAA,GANtBrB,cAAc;AAuBpB,eAAeb,UAAU;AAAC,IAAAmB,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}