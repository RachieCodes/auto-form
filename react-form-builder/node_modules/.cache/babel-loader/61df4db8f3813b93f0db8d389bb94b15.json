{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\auto-form\\\\react-form-builder\\\\src\\\\components\\\\FormBuilder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DragDropUI from './DragDropUI';\nimport LivePreview from './LivePreview';\nimport MultiStepForm from './MultiStepForm';\nimport ConditionalLogic from './ConditionalLogic';\nimport FieldSuggestions from './FieldSuggestions';\nimport ExportJSONSchema from './ExportJSONSchema';\nimport EmbedCode from './EmbedCode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INPUT_TYPES = [\"button\", \"checkbox\", \"color\", \"date\", \"datetime-local\", \"email\", \"file\", \"hidden\", \"image\", \"month\", \"number\", \"password\", \"radio\", \"range\", \"reset\", \"search\", \"submit\", \"tel\", \"text\", \"time\", \"url\", \"week\"];\nconst FormBuilder = ({\n  fields,\n  setFields\n}) => {\n  _s();\n  const [validationRules, setValidationRules] = useState([]);\n  const [newFieldId, setNewFieldId] = useState('');\n  const [newFieldType, setNewFieldType] = useState('text');\n  const [newFieldRequired, setNewFieldRequired] = useState(false);\n  const [editField, setEditField] = useState(null);\n\n  // Add new field\n  const addField = async () => {\n    if (!newFieldId.trim()) return;\n    const newField = {\n      id: newFieldId,\n      label: newFieldId,\n      type: newFieldType,\n      required: newFieldRequired,\n      placeholder: '',\n      options: [],\n      validationRules: []\n    };\n    await fetch('http://localhost:4000/api/fields', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newField)\n    });\n    const res = await fetch('http://localhost:4000/api/fields');\n    const updated = await res.json();\n    setFields(updated);\n    setNewFieldId('');\n    setNewFieldRequired(false);\n  };\n\n  // Remove field\n  const removeField = fieldId => {\n    setFields(fields.filter(f => f.id !== fieldId));\n  };\n\n  // Begin editing a field and fetch its options from backend\n  const startEditField = async field => {\n    try {\n      const res = await fetch(`http://localhost:4000/api/options/${field.id}`);\n      const options = await res.json();\n      setEditField({\n        ...field,\n        options\n      });\n    } catch (err) {\n      console.error(`Failed to fetch options for ${field.id}`, err);\n      setEditField({\n        ...field\n      });\n    }\n  };\n\n  // Save edited field\n  const saveEditField = () => {\n    if (editField) {\n      setFields(fields.map(f => f.id === editField.id ? editField : f));\n      setEditField(null);\n    }\n  };\n  const cancelEditField = () => setEditField(null);\n\n  // Option editing logic\n  const addOption = async () => {\n    if (!editField) return;\n    try {\n      await fetch(`http://localhost:4000/api/options/${editField.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          option: 'New Option'\n        })\n      });\n      const res = await fetch(`http://localhost:4000/api/options/${editField.id}`);\n      const options = await res.json();\n      setEditField({\n        ...editField,\n        options\n      });\n    } catch (err) {\n      console.error(\"Failed to add option\", err);\n    }\n  };\n  const updateOption = async (idx, value) => {\n    if (!editField) return;\n    try {\n      await fetch(`http://localhost:4000/api/options/${editField.id}/${idx}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          option: value\n        })\n      });\n      const res = await fetch(`http://localhost:4000/api/options/${editField.id}`);\n      const options = await res.json();\n      setEditField({\n        ...editField,\n        options\n      });\n    } catch (err) {\n      console.error(\"Failed to update option\", err);\n    }\n  };\n  const removeOption = async idx => {\n    if (!editField) return;\n    try {\n      await fetch(`http://localhost:4000/api/options/${editField.id}/${idx}`, {\n        method: 'DELETE'\n      });\n      const res = await fetch(`http://localhost:4000/api/options/${editField.id}`);\n      const options = await res.json();\n      setEditField({\n        ...editField,\n        options\n      });\n    } catch (err) {\n      console.error(\"Failed to remove option\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add Field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Field ID\",\n      value: newFieldId,\n      onChange: e => setNewFieldId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: newFieldType,\n      onChange: e => setNewFieldType(e.target.value),\n      children: INPUT_TYPES.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: type,\n        children: type\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Required:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: newFieldRequired,\n        onChange: e => setNewFieldRequired(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addField,\n      children: \"Add Field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fields\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: field.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), \" (\", field.type, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => startEditField(field),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeField(field.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, field.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), editField && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '1em',\n        marginTop: '1em'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Edit Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editField.id,\n          onChange: e => setEditField({\n            ...editField,\n            id: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: editField.type,\n          onChange: e => setEditField({\n            ...editField,\n            type: e.target.value\n          }),\n          children: INPUT_TYPES.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: type,\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Required:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: editField.required,\n          onChange: e => setEditField({\n            ...editField,\n            required: e.target.checked\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Placeholder:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editField.placeholder,\n          onChange: e => setEditField({\n            ...editField,\n            placeholder: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Options:\", /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addOption,\n          children: \"Add Option\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: (editField.options || []).map((opt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: opt,\n              onChange: e => updateOption(idx, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeOption(idx),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveEditField,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelEditField,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DragDropUI, {\n      fields: fields,\n      setFields: setFields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LivePreview, {\n      formData: fields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MultiStepForm, {\n      steps: fields,\n      onSubmit: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConditionalLogic, {\n      fields: fields,\n      onUpdate: setFields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FieldSuggestions, {\n      onSuggest: setValidationRules\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExportJSONSchema, {\n      formConfig: {\n        fields,\n        validationRules\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmbedCode, {\n      formCode: JSON.stringify({\n        fields,\n        validationRules\n      }, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(FormBuilder, \"L4koHn56yi6R+1uBSVJjUg61S5Q=\");\n_c = FormBuilder;\nexport default FormBuilder;\nvar _c;\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"names":["React","useState","DragDropUI","LivePreview","MultiStepForm","ConditionalLogic","FieldSuggestions","ExportJSONSchema","EmbedCode","jsxDEV","_jsxDEV","INPUT_TYPES","FormBuilder","fields","setFields","_s","validationRules","setValidationRules","newFieldId","setNewFieldId","newFieldType","setNewFieldType","newFieldRequired","setNewFieldRequired","editField","setEditField","addField","trim","newField","id","label","type","required","placeholder","options","fetch","method","headers","body","JSON","stringify","res","updated","json","removeField","fieldId","filter","f","startEditField","field","err","console","error","saveEditField","map","cancelEditField","addOption","option","updateOption","idx","value","removeOption","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","checked","onClick","style","border","padding","marginTop","opt","formData","steps","onSubmit","onUpdate","onSuggest","formConfig","formCode","_c","$RefreshReg$"],"sources":["D:/Code/auto-form/react-form-builder/src/components/FormBuilder.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { FormField, ValidationRule } from '../types';\nimport DragDropUI from './DragDropUI';\nimport LivePreview from './LivePreview';\nimport MultiStepForm from './MultiStepForm';\nimport ConditionalLogic from './ConditionalLogic';\nimport FieldSuggestions from './FieldSuggestions';\nimport ExportJSONSchema from './ExportJSONSchema';\nimport EmbedCode from './EmbedCode';\n\nconst INPUT_TYPES = [\n  \"button\", \"checkbox\", \"color\", \"date\", \"datetime-local\", \"email\", \"file\", \"hidden\",\n  \"image\", \"month\", \"number\", \"password\", \"radio\", \"range\", \"reset\", \"search\",\n  \"submit\", \"tel\", \"text\", \"time\", \"url\", \"week\"\n];\n\ninterface FormBuilderProps {\n  fields: FormField[];\n  setFields: (fields: FormField[]) => void;\n}\n\nconst FormBuilder: React.FC<FormBuilderProps> = ({ fields, setFields }) => {\n  const [validationRules, setValidationRules] = useState<ValidationRule[]>([]);\n  const [newFieldId, setNewFieldId] = useState('');\n  const [newFieldType, setNewFieldType] = useState('text');\n  const [newFieldRequired, setNewFieldRequired] = useState(false);\n  const [editField, setEditField] = useState<FormField | null>(null);\n\n  // Add new field\nconst addField = async () => {\n  if (!newFieldId.trim()) return;\n  const newField = {\n    id: newFieldId,\n    label: newFieldId,\n    type: newFieldType,\n    required: newFieldRequired,\n    placeholder: '',\n    options: [],\n    validationRules: []\n  };\n  await fetch('http://localhost:4000/api/fields', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(newField)\n  });\n  const res = await fetch('http://localhost:4000/api/fields');\n  const updated = await res.json();\n  setFields(updated);\n  setNewFieldId('');\n  setNewFieldRequired(false);\n};\n\n\n  // Remove field\n  const removeField = (fieldId: string) => {\n    setFields(fields.filter(f => f.id !== fieldId));\n  };\n\n  // Begin editing a field and fetch its options from backend\n  const startEditField = async (field: FormField) => {\n    try {\n      const res = await fetch(`http://localhost:4000/api/options/${field.id}`);\n      const options = await res.json();\n      setEditField({ ...field, options });\n    } catch (err) {\n      console.error(`Failed to fetch options for ${field.id}`, err);\n      setEditField({ ...field });\n    }\n  };\n\n  // Save edited field\n  const saveEditField = () => {\n    if (editField) {\n      setFields(fields.map(f => f.id === editField.id ? editField : f));\n      setEditField(null);\n    }\n  };\n\n  const cancelEditField = () => setEditField(null);\n\n  // Option editing logic\n  const addOption = async () => {\n    if (!editField) return;\n    try {\n      await fetch(`http://localhost:4000/api/options/${editField.id}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ option: 'New Option' })\n      });\n      const res = await fetch(`http://localhost:4000/api/options/${editField.id}`);\n      const options = await res.json();\n      setEditField({ ...editField, options });\n    } catch (err) {\n      console.error(\"Failed to add option\", err);\n    }\n  };\n\n  const updateOption = async (idx: number, value: string) => {\n    if (!editField) return;\n    try {\n      await fetch(`http://localhost:4000/api/options/${editField.id}/${idx}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ option: value })\n      });\n      const res = await fetch(`http://localhost:4000/api/options/${editField.id}`);\n      const options = await res.json();\n      setEditField({ ...editField, options });\n    } catch (err) {\n      console.error(\"Failed to update option\", err);\n    }\n  };\n\n  const removeOption = async (idx: number) => {\n    if (!editField) return;\n    try {\n      await fetch(`http://localhost:4000/api/options/${editField.id}/${idx}`, {\n        method: 'DELETE'\n      });\n      const res = await fetch(`http://localhost:4000/api/options/${editField.id}`);\n      const options = await res.json();\n      setEditField({ ...editField, options });\n    } catch (err) {\n      console.error(\"Failed to remove option\", err);\n    }\n  };\n\n  return (\n    <div>\n      <h3>Add Field</h3>\n      <input\n        type=\"text\"\n        placeholder=\"Field ID\"\n        value={newFieldId}\n        onChange={e => setNewFieldId(e.target.value)}\n      />\n      <select value={newFieldType} onChange={e => setNewFieldType(e.target.value)}>\n        {INPUT_TYPES.map(type => (\n          <option key={type} value={type}>{type}</option>\n        ))}\n      </select>\n      <label>\n        Required:\n        <input\n          type=\"checkbox\"\n          checked={newFieldRequired}\n          onChange={e => setNewFieldRequired(e.target.checked)}\n        />\n      </label>\n      <button onClick={addField}>Add Field</button>\n\n      <hr />\n      <h3>Fields</h3>\n      <ul>\n        {fields.map(field => (\n          <li key={field.id}>\n            <strong>{field.id}</strong> ({field.type})\n            <button onClick={() => startEditField(field)}>Edit</button>\n            <button onClick={() => removeField(field.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n\n      {editField && (\n        <div style={{ border: '1px solid #ccc', padding: '1em', marginTop: '1em' }}>\n          <h4>Edit Field</h4>\n          <label>\n            ID:\n            <input\n              type=\"text\"\n              value={editField.id}\n              onChange={e => setEditField({ ...editField, id: e.target.value })}\n            />\n          </label>\n          <br />\n          <label>\n            Type:\n            <select\n              value={editField.type}\n              onChange={e => setEditField({ ...editField, type: e.target.value })}\n            >\n              {INPUT_TYPES.map(type => (\n                <option key={type} value={type}>{type}</option>\n              ))}\n            </select>\n          </label>\n          <br />\n          <label>\n            Required:\n            <input\n              type=\"checkbox\"\n              checked={editField.required}\n              onChange={e => setEditField({ ...editField, required: e.target.checked })}\n            />\n          </label>\n          <br />\n          <label>\n            Placeholder:\n            <input\n              type=\"text\"\n              value={editField.placeholder}\n              onChange={e => setEditField({ ...editField, placeholder: e.target.value })}\n            />\n          </label>\n          <br />\n          <label>\n            Options:\n            <button type=\"button\" onClick={addOption}>Add Option</button>\n            <ul>\n              {(editField.options || []).map((opt, idx) => (\n                <li key={idx}>\n                  <input\n                    type=\"text\"\n                    value={opt}\n                    onChange={e => updateOption(idx, e.target.value)}\n                  />\n                  <button type=\"button\" onClick={() => removeOption(idx)}>Remove</button>\n                </li>\n              ))}\n            </ul>\n          </label>\n          <br />\n          <button onClick={saveEditField}>Save</button>\n          <button onClick={cancelEditField}>Cancel</button>\n        </div>\n      )}\n\n      <DragDropUI fields={fields} setFields={setFields} />\n      <LivePreview formData={fields} />\n      <MultiStepForm steps={fields} onSubmit={() => {}} />\n      <ConditionalLogic fields={fields} onUpdate={setFields} />\n      <FieldSuggestions onSuggest={setValidationRules} />\n      <ExportJSONSchema formConfig={{ fields, validationRules }} />\n      <EmbedCode formCode={JSON.stringify({ fields, validationRules }, null, 2)} />\n    </div>\n  );\n};\n\nexport default FormBuilder;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAG,CAClB,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAClF,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAC3E,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAC/C;AAOD,MAAMC,WAAuC,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAmB,EAAE,CAAC;EAC5E,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,MAAM,CAAC;EACxD,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAmB,IAAI,CAAC;;EAElE;EACF,MAAMyB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI,CAACR,UAAU,CAACS,IAAI,CAAC,CAAC,EAAE;IACxB,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAEX,UAAU;MACdY,KAAK,EAAEZ,UAAU;MACjBa,IAAI,EAAEX,YAAY;MAClBY,QAAQ,EAAEV,gBAAgB;MAC1BW,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MACXlB,eAAe,EAAE;IACnB,CAAC;IACD,MAAMmB,KAAK,CAAC,kCAAkC,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,QAAQ;IAC/B,CAAC,CAAC;IACF,MAAMa,GAAG,GAAG,MAAMN,KAAK,CAAC,kCAAkC,CAAC;IAC3D,MAAMO,OAAO,GAAG,MAAMD,GAAG,CAACE,IAAI,CAAC,CAAC;IAChC7B,SAAS,CAAC4B,OAAO,CAAC;IAClBvB,aAAa,CAAC,EAAE,CAAC;IACjBI,mBAAmB,CAAC,KAAK,CAAC;EAC5B,CAAC;;EAGC;EACA,MAAMqB,WAAW,GAAIC,OAAe,IAAK;IACvC/B,SAAS,CAACD,MAAM,CAACiC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAClB,EAAE,KAAKgB,OAAO,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMG,cAAc,GAAG,MAAOC,KAAgB,IAAK;IACjD,IAAI;MACF,MAAMR,GAAG,GAAG,MAAMN,KAAK,CAAC,qCAAqCc,KAAK,CAACpB,EAAE,EAAE,CAAC;MACxE,MAAMK,OAAO,GAAG,MAAMO,GAAG,CAACE,IAAI,CAAC,CAAC;MAChClB,YAAY,CAAC;QAAE,GAAGwB,KAAK;QAAEf;MAAQ,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,+BAA+BH,KAAK,CAACpB,EAAE,EAAE,EAAEqB,GAAG,CAAC;MAC7DzB,YAAY,CAAC;QAAE,GAAGwB;MAAM,CAAC,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI7B,SAAS,EAAE;MACbV,SAAS,CAACD,MAAM,CAACyC,GAAG,CAACP,CAAC,IAAIA,CAAC,CAAClB,EAAE,KAAKL,SAAS,CAACK,EAAE,GAAGL,SAAS,GAAGuB,CAAC,CAAC,CAAC;MACjEtB,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,MAAM8B,eAAe,GAAGA,CAAA,KAAM9B,YAAY,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAM+B,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAAChC,SAAS,EAAE;IAChB,IAAI;MACF,MAAMW,KAAK,CAAC,qCAAqCX,SAAS,CAACK,EAAE,EAAE,EAAE;QAC/DO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEiB,MAAM,EAAE;QAAa,CAAC;MAC/C,CAAC,CAAC;MACF,MAAMhB,GAAG,GAAG,MAAMN,KAAK,CAAC,qCAAqCX,SAAS,CAACK,EAAE,EAAE,CAAC;MAC5E,MAAMK,OAAO,GAAG,MAAMO,GAAG,CAACE,IAAI,CAAC,CAAC;MAChClB,YAAY,CAAC;QAAE,GAAGD,SAAS;QAAEU;MAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC5C;EACF,CAAC;EAED,MAAMQ,YAAY,GAAG,MAAAA,CAAOC,GAAW,EAAEC,KAAa,KAAK;IACzD,IAAI,CAACpC,SAAS,EAAE;IAChB,IAAI;MACF,MAAMW,KAAK,CAAC,qCAAqCX,SAAS,CAACK,EAAE,IAAI8B,GAAG,EAAE,EAAE;QACtEvB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEiB,MAAM,EAAEG;QAAM,CAAC;MACxC,CAAC,CAAC;MACF,MAAMnB,GAAG,GAAG,MAAMN,KAAK,CAAC,qCAAqCX,SAAS,CAACK,EAAE,EAAE,CAAC;MAC5E,MAAMK,OAAO,GAAG,MAAMO,GAAG,CAACE,IAAI,CAAC,CAAC;MAChClB,YAAY,CAAC;QAAE,GAAGD,SAAS;QAAEU;MAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC/C;EACF,CAAC;EAED,MAAMW,YAAY,GAAG,MAAOF,GAAW,IAAK;IAC1C,IAAI,CAACnC,SAAS,EAAE;IAChB,IAAI;MACF,MAAMW,KAAK,CAAC,qCAAqCX,SAAS,CAACK,EAAE,IAAI8B,GAAG,EAAE,EAAE;QACtEvB,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMK,GAAG,GAAG,MAAMN,KAAK,CAAC,qCAAqCX,SAAS,CAACK,EAAE,EAAE,CAAC;MAC5E,MAAMK,OAAO,GAAG,MAAMO,GAAG,CAACE,IAAI,CAAC,CAAC;MAChClB,YAAY,CAAC;QAAE,GAAGD,SAAS;QAAEU;MAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC/C;EACF,CAAC;EAED,oBACExC,OAAA;IAAAoD,QAAA,gBACEpD,OAAA;MAAAoD,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBxD,OAAA;MACEqB,IAAI,EAAC,MAAM;MACXE,WAAW,EAAC,UAAU;MACtB2B,KAAK,EAAE1C,UAAW;MAClBiD,QAAQ,EAAEC,CAAC,IAAIjD,aAAa,CAACiD,CAAC,CAACC,MAAM,CAACT,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACFxD,OAAA;MAAQkD,KAAK,EAAExC,YAAa;MAAC+C,QAAQ,EAAEC,CAAC,IAAI/C,eAAe,CAAC+C,CAAC,CAACC,MAAM,CAACT,KAAK,CAAE;MAAAE,QAAA,EACzEnD,WAAW,CAAC2C,GAAG,CAACvB,IAAI,iBACnBrB,OAAA;QAAmBkD,KAAK,EAAE7B,IAAK;QAAA+B,QAAA,EAAE/B;MAAI,GAAxBA,IAAI;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6B,CAC/C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eACTxD,OAAA;MAAAoD,QAAA,GAAO,WAEL,eAAApD,OAAA;QACEqB,IAAI,EAAC,UAAU;QACfuC,OAAO,EAAEhD,gBAAiB;QAC1B6C,QAAQ,EAAEC,CAAC,IAAI7C,mBAAmB,CAAC6C,CAAC,CAACC,MAAM,CAACC,OAAO;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACRxD,OAAA;MAAQ6D,OAAO,EAAE7C,QAAS;MAAAoC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE7CxD,OAAA;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNxD,OAAA;MAAAoD,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfxD,OAAA;MAAAoD,QAAA,EACGjD,MAAM,CAACyC,GAAG,CAACL,KAAK,iBACfvC,OAAA;QAAAoD,QAAA,gBACEpD,OAAA;UAAAoD,QAAA,EAASb,KAAK,CAACpB;QAAE;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,MAAE,EAACjB,KAAK,CAAClB,IAAI,EAAC,GACzC,eAAArB,OAAA;UAAQ6D,OAAO,EAAEA,CAAA,KAAMvB,cAAc,CAACC,KAAK,CAAE;UAAAa,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC3DxD,OAAA;UAAQ6D,OAAO,EAAEA,CAAA,KAAM3B,WAAW,CAACK,KAAK,CAACpB,EAAE,CAAE;UAAAiC,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAHtDjB,KAAK,CAACpB,EAAE;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAEJ1C,SAAS,iBACRd,OAAA;MAAK8D,KAAK,EAAE;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAM,CAAE;MAAAb,QAAA,gBACzEpD,OAAA;QAAAoD,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBxD,OAAA;QAAAoD,QAAA,GAAO,KAEL,eAAApD,OAAA;UACEqB,IAAI,EAAC,MAAM;UACX6B,KAAK,EAAEpC,SAAS,CAACK,EAAG;UACpBsC,QAAQ,EAAEC,CAAC,IAAI3C,YAAY,CAAC;YAAE,GAAGD,SAAS;YAAEK,EAAE,EAAEuC,CAAC,CAACC,MAAM,CAACT;UAAM,CAAC;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRxD,OAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNxD,OAAA;QAAAoD,QAAA,GAAO,OAEL,eAAApD,OAAA;UACEkD,KAAK,EAAEpC,SAAS,CAACO,IAAK;UACtBoC,QAAQ,EAAEC,CAAC,IAAI3C,YAAY,CAAC;YAAE,GAAGD,SAAS;YAAEO,IAAI,EAAEqC,CAAC,CAACC,MAAM,CAACT;UAAM,CAAC,CAAE;UAAAE,QAAA,EAEnEnD,WAAW,CAAC2C,GAAG,CAACvB,IAAI,iBACnBrB,OAAA;YAAmBkD,KAAK,EAAE7B,IAAK;YAAA+B,QAAA,EAAE/B;UAAI,GAAxBA,IAAI;YAAAgC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA6B,CAC/C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACRxD,OAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNxD,OAAA;QAAAoD,QAAA,GAAO,WAEL,eAAApD,OAAA;UACEqB,IAAI,EAAC,UAAU;UACfuC,OAAO,EAAE9C,SAAS,CAACQ,QAAS;UAC5BmC,QAAQ,EAAEC,CAAC,IAAI3C,YAAY,CAAC;YAAE,GAAGD,SAAS;YAAEQ,QAAQ,EAAEoC,CAAC,CAACC,MAAM,CAACC;UAAQ,CAAC;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRxD,OAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNxD,OAAA;QAAAoD,QAAA,GAAO,cAEL,eAAApD,OAAA;UACEqB,IAAI,EAAC,MAAM;UACX6B,KAAK,EAAEpC,SAAS,CAACS,WAAY;UAC7BkC,QAAQ,EAAEC,CAAC,IAAI3C,YAAY,CAAC;YAAE,GAAGD,SAAS;YAAES,WAAW,EAAEmC,CAAC,CAACC,MAAM,CAACT;UAAM,CAAC;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRxD,OAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNxD,OAAA;QAAAoD,QAAA,GAAO,UAEL,eAAApD,OAAA;UAAQqB,IAAI,EAAC,QAAQ;UAACwC,OAAO,EAAEf,SAAU;UAAAM,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC7DxD,OAAA;UAAAoD,QAAA,EACG,CAACtC,SAAS,CAACU,OAAO,IAAI,EAAE,EAAEoB,GAAG,CAAC,CAACsB,GAAG,EAAEjB,GAAG,kBACtCjD,OAAA;YAAAoD,QAAA,gBACEpD,OAAA;cACEqB,IAAI,EAAC,MAAM;cACX6B,KAAK,EAAEgB,GAAI;cACXT,QAAQ,EAAEC,CAAC,IAAIV,YAAY,CAACC,GAAG,EAAES,CAAC,CAACC,MAAM,CAACT,KAAK;YAAE;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD,CAAC,eACFxD,OAAA;cAAQqB,IAAI,EAAC,QAAQ;cAACwC,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAACF,GAAG,CAAE;cAAAG,QAAA,EAAC;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,GANhEP,GAAG;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOR,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRxD,OAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNxD,OAAA;QAAQ6D,OAAO,EAAElB,aAAc;QAAAS,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7CxD,OAAA;QAAQ6D,OAAO,EAAEhB,eAAgB;QAAAO,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CACN,eAEDxD,OAAA,CAACR,UAAU;MAACW,MAAM,EAAEA,MAAO;MAACC,SAAS,EAAEA;IAAU;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDxD,OAAA,CAACP,WAAW;MAAC0E,QAAQ,EAAEhE;IAAO;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjCxD,OAAA,CAACN,aAAa;MAAC0E,KAAK,EAAEjE,MAAO;MAACkE,QAAQ,EAAEA,CAAA,KAAM,CAAC;IAAE;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDxD,OAAA,CAACL,gBAAgB;MAACQ,MAAM,EAAEA,MAAO;MAACmE,QAAQ,EAAElE;IAAU;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzDxD,OAAA,CAACJ,gBAAgB;MAAC2E,SAAS,EAAEhE;IAAmB;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnDxD,OAAA,CAACH,gBAAgB;MAAC2E,UAAU,EAAE;QAAErE,MAAM;QAAEG;MAAgB;IAAE;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7DxD,OAAA,CAACF,SAAS;MAAC2E,QAAQ,EAAE5C,IAAI,CAACC,SAAS,CAAC;QAAE3B,MAAM;QAAEG;MAAgB,CAAC,EAAE,IAAI,EAAE,CAAC;IAAE;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEV,CAAC;AAACnD,EAAA,CAvNIH,WAAuC;AAAAwE,EAAA,GAAvCxE,WAAuC;AAyN7C,eAAeA,WAAW;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}