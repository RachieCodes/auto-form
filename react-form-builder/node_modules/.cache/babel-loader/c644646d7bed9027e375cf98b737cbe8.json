{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\auto-form\\\\react-form-builder\\\\src\\\\components\\\\LivePreview.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:4000/api/options';\nconst LivePreview = ({\n  formData\n}) => {\n  _s();\n  const [fieldsWithOptions, setFieldsWithOptions] = useState(formData);\n  useEffect(() => {\n    // Fetch options for each field from the API\n    Promise.all(formData.map(async field => {\n      const res = await fetch(`${API_URL}/${field.id}`);\n      const options = await res.json();\n      return {\n        ...field,\n        options\n      };\n    })).then(setFieldsWithOptions);\n  }, [formData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Live Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: fieldsWithOptions.map(field => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: field.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this), \" (\", field.type, \") \", field.required ? '[required]' : '', field.options && field.options.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: field.options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: opt\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, this)]\n      }, field.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(LivePreview, \"SCUIDvEcYNcwrpUyOOVro3Ay8yY=\");\n_c = LivePreview;\nexport default LivePreview;\nvar _c;\n$RefreshReg$(_c, \"LivePreview\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","API_URL","LivePreview","formData","_s","fieldsWithOptions","setFieldsWithOptions","Promise","all","map","field","res","fetch","id","options","json","then","children","fileName","_jsxFileName","lineNumber","columnNumber","type","required","length","opt","idx","_c","$RefreshReg$"],"sources":["D:/Code/auto-form/react-form-builder/src/components/LivePreview.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FormField } from '../types';\n\ninterface LivePreviewProps {\n    formData: FormField[];\n}\n\nconst API_URL = 'http://localhost:4000/api/options';\n\nconst LivePreview: React.FC<LivePreviewProps> = ({ formData }) => {\n    const [fieldsWithOptions, setFieldsWithOptions] = useState<FormField[]>(formData);\n\n    useEffect(() => {\n        // Fetch options for each field from the API\n        Promise.all(\n            formData.map(async field => {\n                const res = await fetch(`${API_URL}/${field.id}`);\n                const options = await res.json();\n                return { ...field, options };\n            })\n        ).then(setFieldsWithOptions);\n    }, [formData]);\n\n    return (\n        <div>\n            <h3>Live Preview</h3>\n            <ul>\n                {fieldsWithOptions.map(field => (\n                    <li key={field.id}>\n                        <strong>{field.id}</strong> ({field.type}) {field.required ? '[required]' : ''}\n                        {field.options && field.options.length > 0 && (\n                            <ul>\n                                {field.options.map((opt, idx) => (\n                                    <li key={idx}>{opt}</li>\n                                ))}\n                            </ul>\n                        )}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default LivePreview;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnD,MAAMC,OAAO,GAAG,mCAAmC;AAEnD,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAcK,QAAQ,CAAC;EAEjFN,SAAS,CAAC,MAAM;IACZ;IACAU,OAAO,CAACC,GAAG,CACPL,QAAQ,CAACM,GAAG,CAAC,MAAMC,KAAK,IAAI;MACxB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,IAAIS,KAAK,CAACG,EAAE,EAAE,CAAC;MACjD,MAAMC,OAAO,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;MAChC,OAAO;QAAE,GAAGL,KAAK;QAAEI;MAAQ,CAAC;IAChC,CAAC,CACL,CAAC,CAACE,IAAI,CAACV,oBAAoB,CAAC;EAChC,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,oBACIH,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBrB,OAAA;MAAAiB,QAAA,EACKZ,iBAAiB,CAACI,GAAG,CAACC,KAAK,iBACxBV,OAAA;QAAAiB,QAAA,gBACIjB,OAAA;UAAAiB,QAAA,EAASP,KAAK,CAACG;QAAE;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,MAAE,EAACX,KAAK,CAACY,IAAI,EAAC,IAAE,EAACZ,KAAK,CAACa,QAAQ,GAAG,YAAY,GAAG,EAAE,EAC7Eb,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACI,OAAO,CAACU,MAAM,GAAG,CAAC,iBACtCxB,OAAA;UAAAiB,QAAA,EACKP,KAAK,CAACI,OAAO,CAACL,GAAG,CAAC,CAACgB,GAAG,EAAEC,GAAG,kBACxB1B,OAAA;YAAAiB,QAAA,EAAeQ;UAAG,GAATC,GAAG;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAC1B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CACP;MAAA,GARIX,KAAK,CAACG,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASb,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACjB,EAAA,CAjCIF,WAAuC;AAAAyB,EAAA,GAAvCzB,WAAuC;AAmC7C,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}