{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\auto-form\\\\react-form-builder\\\\src\\\\components\\\\LivePreview.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:4000/api/options';\nconst LivePreview = () => {\n  _s();\n  const [fields, setFields] = useState([]);\n  const [selectedFieldId, setSelectedFieldId] = useState(null);\n  const [options, setOptions] = useState([]);\n\n  // Fetch all fields (simulate with field IDs for demo)\n  useEffect(() => {\n    // You would fetch field IDs from your backend here\n    // For demo, let's assume you have a list of field IDs\n    setFields([{\n      id: 'text-1',\n      label: 'text-1',\n      type: 'text',\n      required: false,\n      placeholder: '',\n      options: [],\n      validationRules: []\n    }\n    // ...other fields\n    ]);\n  }, []);\n\n  // Fetch options for selected field\n  useEffect(() => {\n    if (selectedFieldId) {\n      fetch(`${API_URL}/${selectedFieldId}`).then(res => res.json()).then(data => setOptions(data));\n    }\n  }, [selectedFieldId]);\n\n  // Delete an option\n  const deleteOption = idx => {\n    if (!selectedFieldId) return;\n    fetch(`${API_URL}/${selectedFieldId}/${idx}`, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(data => setOptions(data));\n  };\n\n  // Edit an option\n  const editOption = (idx, value) => {\n    if (!selectedFieldId) return;\n    fetch(`${API_URL}/${selectedFieldId}/${idx}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        option: value\n      })\n    }).then(res => res.json()).then(data => setOptions(data));\n  };\n\n  // Add an option\n  const addOption = value => {\n    if (!selectedFieldId) return;\n    fetch(`${API_URL}/${selectedFieldId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        option: value\n      })\n    }).then(res => res.json()).then(data => setOptions(data));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Live Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Field:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedFieldId || '',\n        onChange: e => setSelectedFieldId(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), fields.map(field => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: field.id,\n          children: field.id\n        }, field.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), selectedFieldId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Options for \", selectedFieldId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: opt,\n            onChange: e => editOption(idx, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteOption(idx),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addOption('New Option'),\n        children: \"Add Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(LivePreview, \"2rgPl3iBpzlPx9H9Cs+i2MQrARU=\");\n_c = LivePreview;\nexport default LivePreview;\nvar _c;\n$RefreshReg$(_c, \"LivePreview\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","API_URL","LivePreview","_s","fields","setFields","selectedFieldId","setSelectedFieldId","options","setOptions","id","label","type","required","placeholder","validationRules","fetch","then","res","json","data","deleteOption","idx","method","editOption","value","headers","body","JSON","stringify","option","addOption","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","map","field","opt","onClick","_c","$RefreshReg$"],"sources":["D:/Code/auto-form/react-form-builder/src/components/LivePreview.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FormField } from '../types';\n\nconst API_URL = 'http://localhost:4000/api/options';\n\nconst LivePreview: React.FC = () => {\n    const [fields, setFields] = useState<FormField[]>([]);\n    const [selectedFieldId, setSelectedFieldId] = useState<string | null>(null);\n    const [options, setOptions] = useState<string[]>([]);\n\n    // Fetch all fields (simulate with field IDs for demo)\n    useEffect(() => {\n        // You would fetch field IDs from your backend here\n        // For demo, let's assume you have a list of field IDs\n        setFields([\n            { id: 'text-1', label: 'text-1', type: 'text', required: false, placeholder: '', options: [], validationRules: [] },\n            // ...other fields\n        ]);\n    }, []);\n\n    // Fetch options for selected field\n    useEffect(() => {\n        if (selectedFieldId) {\n            fetch(`${API_URL}/${selectedFieldId}`)\n                .then(res => res.json())\n                .then(data => setOptions(data));\n        }\n    }, [selectedFieldId]);\n\n    // Delete an option\n    const deleteOption = (idx: number) => {\n        if (!selectedFieldId) return;\n        fetch(`${API_URL}/${selectedFieldId}/${idx}`, { method: 'DELETE' })\n            .then(res => res.json())\n            .then(data => setOptions(data));\n    };\n\n    // Edit an option\n    const editOption = (idx: number, value: string) => {\n        if (!selectedFieldId) return;\n        fetch(`${API_URL}/${selectedFieldId}/${idx}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ option: value })\n        })\n            .then(res => res.json())\n            .then(data => setOptions(data));\n    };\n\n    // Add an option\n    const addOption = (value: string) => {\n        if (!selectedFieldId) return;\n        fetch(`${API_URL}/${selectedFieldId}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ option: value })\n        })\n            .then(res => res.json())\n            .then(data => setOptions(data));\n    };\n\n    return (\n        <div>\n            <h3>Live Preview</h3>\n            <div>\n                <label>Select Field:</label>\n                <select\n                    value={selectedFieldId || ''}\n                    onChange={e => setSelectedFieldId(e.target.value)}\n                >\n                    <option value=\"\">Select a field</option>\n                    {fields.map(field => (\n                        <option key={field.id} value={field.id}>{field.id}</option>\n                    ))}\n                </select>\n            </div>\n            {selectedFieldId && (\n                <div>\n                    <h4>Options for {selectedFieldId}</h4>\n                    <ul>\n                        {options.map((opt, idx) => (\n                            <li key={idx}>\n                                <input\n                                    type=\"text\"\n                                    value={opt}\n                                    onChange={e => editOption(idx, e.target.value)}\n                                />\n                                <button onClick={() => deleteOption(idx)}>Delete</button>\n                            </li>\n                        ))}\n                    </ul>\n                    <button onClick={() => addOption('New Option')}>Add Option</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default LivePreview;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}